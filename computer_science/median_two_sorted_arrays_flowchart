// Median of Two Sorted Arrays Flowchart
digraph {
	dpi=300 rankdir=TB size="8,10"
	node [fillcolor=lightyellow fontname=Arial fontsize=12 shape=rectangle style="rounded, filled"]
	edge [fontname=Arial fontsize=10]
	Start [label="Start
Function Entry Point"]
	CheckSize [label="Is len(nums1) > len(nums2)?"]
	SwapArrays [label="Swap nums1 and nums2"]
	Proceed [label="Proceed without swapping"]
	InitVars [label="Initialize variables:
n1, n2, total_length,
half_length, left, right"]
	WhileLoop [label="While left ≤ right"]
	CalcPartitions [label="Calculate partitions:
partition_nums1 = (left + right) // 2
partition_nums2 = half_length - partition_nums1"]
	HandleEdges [label="Handle edge cases for partitions:
- max_left_nums1, min_right_nums1
- max_left_nums2, min_right_nums2"]
	CheckPartition [label="Is max_left_nums1 ≤ min_right_nums2
AND
max_left_nums2 ≤ min_right_nums1?"]
	CorrectPartition [label="Correct partition found"]
	CheckEven [label="Is total_length % 2 == 0?"]
	MedianEven [label="Median = (max(max_left_nums1, max_left_nums2)
+ min(min_right_nums1, min_right_nums2)) / 2"]
	MedianOdd [label="Median = max(max_left_nums1, max_left_nums2)"]
	ReturnMedian [label="Return Median"]
	AdjustLeft [label="max_left_nums1 > min_right_nums2
Move left: right = partition_nums1 - 1"]
	AdjustRight [label="max_left_nums2 > min_right_nums1
Move right: left = partition_nums1 + 1"]
	LoopBack [label="Loop back to While condition"]
	Error [label="Raise Error:
\"Input arrays are not valid for finding median.\""]
	Start -> CheckSize
	CheckSize -> SwapArrays [label=Yes]
	CheckSize -> Proceed [label=No]
	SwapArrays -> InitVars
	Proceed -> InitVars
	InitVars -> WhileLoop
	WhileLoop -> CalcPartitions
	CalcPartitions -> HandleEdges
	HandleEdges -> CheckPartition
	CheckPartition -> CorrectPartition [label=Yes]
	CheckPartition -> AdjustLeft [label="No
If max_left_nums1 > min_right_nums2"]
	CheckPartition -> AdjustRight [label="No
Else"]
	AdjustLeft -> LoopBack
	AdjustRight -> LoopBack
	LoopBack -> WhileLoop
	CorrectPartition -> CheckEven
	CheckEven -> MedianEven [label=Yes]
	CheckEven -> MedianOdd [label=No]
	MedianEven -> ReturnMedian
	MedianOdd -> ReturnMedian
	WhileLoop -> Error [label="Exit Loop
No Correct Partition Found"]
}
